class Gift < ::ApplicationRecord
  # defined by `delegate` to: #contribution
  def title: (*untyped, **untyped) -> untyped
  # defined by `delegate` to: #contribution
  def issue_url: (*untyped, **untyped) -> untyped
  def self.year: (untyped year) -> Gift::ActiveRecord_Relation
  extend _ActiveRecord_Relation_ClassMethods[Gift, Gift::ActiveRecord_Relation, ::Integer]
  extend Gift::ActiveRecord_Persistence_ClassMethods
  include Gift::GeneratedAssociationMethods
  include Gift::GeneratedAttributeMethods
end

class Gift::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Gift::GeneratedRelationMethods
end

class Gift::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include _ActiveRecord_Relation[Gift, ::Integer]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Gift::GeneratedRelationMethods
end

class Gift::ActiveRecord_DisableJoinsAssociationRelation < ::ActiveRecord::DisableJoinsAssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Gift::GeneratedRelationMethods
end

module Gift::ActiveRecord_Persistence_ClassMethods
  def create: (?id: ::Integer, ?user_id: ::Integer, ?contribution_id: ::Integer, ?date: ::Date, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, **untyped) ?{ (Gift) -> void } -> Gift
            | (::Array[Hash[Symbol, untyped]]) ?{ (Gift) -> void } -> ::Array[Gift]

  def create!: (?id: ::Integer, ?user_id: ::Integer, ?contribution_id: ::Integer, ?date: ::Date, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, **untyped) ?{ (Gift) -> void } -> Gift
             | (::Array[Hash[Symbol, untyped]]) ?{ (Gift) -> void } -> ::Array[Gift]

  def build: (?id: ::Integer, ?user_id: ::Integer, ?contribution_id: ::Integer, ?date: ::Date, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, **untyped) ?{ (Gift) -> void } -> Gift
           | (::Array[Hash[Symbol, untyped]]) ?{ (Gift) -> void } -> ::Array[Gift]
end

class Gift::ActiveRecord_Relation < ::ActiveRecord::Relation
  include Gift::GeneratedRelationMethods
  include _ActiveRecord_Relation[Gift, ::Integer]
  include Enumerable[Gift]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
end

module Gift::GeneratedAssociationMethods
  def user: () -> User?

  def user=: (User?) -> User?

  def reload_user: () -> User?

  def build_user: (?untyped attributes) ?{ (User) -> void } -> User

  def create_user: (?untyped attributes) ?{ (User) -> void } -> User

  def create_user!: (?untyped attributes) ?{ (User) -> void } -> User

  def contribution: () -> Contribution?

  def contribution=: (Contribution?) -> Contribution?

  def reload_contribution: () -> Contribution?

  def build_contribution: (?untyped attributes) ?{ (Contribution) -> void } -> Contribution

  def create_contribution: (?untyped attributes) ?{ (Contribution) -> void } -> Contribution

  def create_contribution!: (?untyped attributes) ?{ (Contribution) -> void } -> Contribution
end

module Gift::GeneratedAttributeMethods
  attr_accessor id: ::Integer

  def id_before_type_cast: () -> ::Integer

  def id_for_database: () -> ::Integer

  def id_came_from_user?: () -> bool

  def id?: () -> bool

  def id_previously_changed?: () -> bool

  def id_changed?: () -> bool

  def id_change: () -> [ ::Integer?, ::Integer? ]

  def id_will_change!: () -> void

  def id_was: () -> ::Integer?

  def id_previous_change: () -> Array[::Integer?]?

  def id_previously_was: () -> ::Integer?

  def restore_id!: () -> void

  def clear_id_change: () -> void

  def saved_change_to_id?: () -> bool

  def saved_change_to_id: () -> Array[::Integer?]?

  def id_before_last_save: () -> ::Integer?

  def will_save_change_to_id?: () -> bool

  def id_change_to_be_saved: () -> Array[::Integer?]?

  def id_in_database: () -> ::Integer?

  attr_accessor user_id: ::Integer

  def user_id_before_type_cast: () -> ::Integer

  def user_id_for_database: () -> ::Integer

  def user_id_came_from_user?: () -> bool

  def user_id?: () -> bool

  def user_id_previously_changed?: () -> bool

  def user_id_changed?: () -> bool

  def user_id_change: () -> [ ::Integer?, ::Integer? ]

  def user_id_will_change!: () -> void

  def user_id_was: () -> ::Integer?

  def user_id_previous_change: () -> Array[::Integer?]?

  def user_id_previously_was: () -> ::Integer?

  def restore_user_id!: () -> void

  def clear_user_id_change: () -> void

  def saved_change_to_user_id?: () -> bool

  def saved_change_to_user_id: () -> Array[::Integer?]?

  def user_id_before_last_save: () -> ::Integer?

  def will_save_change_to_user_id?: () -> bool

  def user_id_change_to_be_saved: () -> Array[::Integer?]?

  def user_id_in_database: () -> ::Integer?

  attr_accessor contribution_id: ::Integer

  def contribution_id_before_type_cast: () -> ::Integer

  def contribution_id_for_database: () -> ::Integer

  def contribution_id_came_from_user?: () -> bool

  def contribution_id?: () -> bool

  def contribution_id_previously_changed?: () -> bool

  def contribution_id_changed?: () -> bool

  def contribution_id_change: () -> [ ::Integer?, ::Integer? ]

  def contribution_id_will_change!: () -> void

  def contribution_id_was: () -> ::Integer?

  def contribution_id_previous_change: () -> Array[::Integer?]?

  def contribution_id_previously_was: () -> ::Integer?

  def restore_contribution_id!: () -> void

  def clear_contribution_id_change: () -> void

  def saved_change_to_contribution_id?: () -> bool

  def saved_change_to_contribution_id: () -> Array[::Integer?]?

  def contribution_id_before_last_save: () -> ::Integer?

  def will_save_change_to_contribution_id?: () -> bool

  def contribution_id_change_to_be_saved: () -> Array[::Integer?]?

  def contribution_id_in_database: () -> ::Integer?

  attr_accessor date: ::Date

  def date_before_type_cast: () -> ::Date

  def date_for_database: () -> ::Date

  def date_came_from_user?: () -> bool

  def date?: () -> bool

  def date_previously_changed?: () -> bool

  def date_changed?: () -> bool

  def date_change: () -> [ ::Date?, ::Date? ]

  def date_will_change!: () -> void

  def date_was: () -> ::Date?

  def date_previous_change: () -> Array[::Date?]?

  def date_previously_was: () -> ::Date?

  def restore_date!: () -> void

  def clear_date_change: () -> void

  def saved_change_to_date?: () -> bool

  def saved_change_to_date: () -> Array[::Date?]?

  def date_before_last_save: () -> ::Date?

  def will_save_change_to_date?: () -> bool

  def date_change_to_be_saved: () -> Array[::Date?]?

  def date_in_database: () -> ::Date?

  attr_accessor created_at: ::ActiveSupport::TimeWithZone

  def created_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone

  def created_at_for_database: () -> ::ActiveSupport::TimeWithZone

  def created_at_came_from_user?: () -> bool

  def created_at?: () -> bool

  def created_at_previously_changed?: () -> bool

  def created_at_changed?: () -> bool

  def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def created_at_will_change!: () -> void

  def created_at_was: () -> ::ActiveSupport::TimeWithZone?

  def created_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_created_at!: () -> void

  def clear_created_at_change: () -> void

  def saved_change_to_created_at?: () -> bool

  def saved_change_to_created_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_created_at?: () -> bool

  def created_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor updated_at: ::ActiveSupport::TimeWithZone

  def updated_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone

  def updated_at_for_database: () -> ::ActiveSupport::TimeWithZone

  def updated_at_came_from_user?: () -> bool

  def updated_at?: () -> bool

  def updated_at_previously_changed?: () -> bool

  def updated_at_changed?: () -> bool

  def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def updated_at_will_change!: () -> void

  def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

  def updated_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_updated_at!: () -> void

  def clear_updated_at_change: () -> void

  def saved_change_to_updated_at?: () -> bool

  def saved_change_to_updated_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_updated_at?: () -> bool

  def updated_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?
end

module Gift::GeneratedRelationMethods
  def year: (*untyped, **untyped) -> untyped

  def __callbacks: (*untyped, **untyped) -> untyped

  def default_date: (*untyped, **untyped) -> untyped

  def format_gift_date: (*untyped, **untyped) -> untyped

  def default_date=: (*untyped, **untyped) -> untyped

  def defined_enums: (*untyped, **untyped) -> untyped

  def giftable_dates: (*untyped, **untyped) -> untyped

  def counter_cached_association_names: (*untyped, **untyped) -> untyped

  def _reflections: (*untyped, **untyped) -> untyped

  def _validators: (*untyped, **untyped) -> untyped

  def find: (*untyped, **untyped) -> untyped

  include Kaminari::ConfigurationMethods::ClassMethods

  include Draper::Decoratable::ClassMethods

  include Kaminari::ActiveRecordExtension::ClassMethods

  include ActiveRecord::Normalization::ClassMethods

  include ActiveRecord::Suppressor::ClassMethods

  include ActiveRecord::SignedId::ClassMethods

  include ActiveRecord::TokenFor::ClassMethods

  include ActiveRecord::SecureToken::ClassMethods

  include ActiveRecord::Store::ClassMethods

  include ActiveRecord::Reflection::ClassMethods

  include ActiveRecord::NoTouching::ClassMethods

  include ActiveRecord::Transactions::ClassMethods

  include ActiveRecord::NestedAttributes::ClassMethods

  include ActiveRecord::AutosaveAssociation::ClassMethods

  include ActiveRecord::SecurePassword::ClassMethods

  include ActiveModel::SecurePassword::ClassMethods

  include ActiveRecord::Associations::ClassMethods

  include ActiveRecord::Timestamp::ClassMethods

  include ActiveModel::Validations::Callbacks::ClassMethods

  include ActiveRecord::Callbacks::ClassMethods

  include ActiveRecord::AttributeMethods::Serialization::ClassMethods

  include ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  include ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  include ActiveRecord::AttributeMethods::Write::ClassMethods

  include ActiveRecord::AttributeMethods::Read::ClassMethods

  include ActiveRecord::AttributeMethods::ClassMethods

  include ActiveModel::AttributeMethods::ClassMethods

  include ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  include ActiveRecord::Locking::Optimistic::ClassMethods

  include ActiveRecord::Attributes::ClassMethods

  include ActiveModel::AttributeRegistration::ClassMethods

  include ActiveRecord::CounterCache::ClassMethods

  include ActiveRecord::Validations::ClassMethods

  include ActiveRecord::Integration::ClassMethods

  include ActiveRecord::Sanitization::ClassMethods

  include ActiveRecord::Scoping::Named::ClassMethods

  include ActiveRecord::Scoping::Default::ClassMethods

  include ActiveRecord::Scoping::ClassMethods

  include ActiveRecord::Inheritance::ClassMethods

  include ActiveRecord::ModelSchema::ClassMethods

  include ActiveRecord::ReadonlyAttributes::ClassMethods

  include ActiveRecord::Persistence::ClassMethods

  include ActiveRecord::Core::ClassMethods

  include ActiveRecord::Aggregations::ClassMethods

  include ActiveRecord::Delegation::DelegateCache

  include ActiveRecord::Enum

  include ActiveRecord::DelegatedType

  include ActiveRecord::DynamicMatchers

  include ActiveRecord::Translation

  include ActiveRecord::Querying

  include ActiveRecord::QueryCache::ClassMethods

  include ActiveRecord::ConnectionHandling

  include ActiveSupport::Benchmarkable

  include ActiveModel::Conversion::ClassMethods

  include ActiveModel::Validations::HelperMethods

  include ActiveModel::Translation

  include ActiveSupport::DescendantsTracker

  include ActiveSupport::Callbacks::ClassMethods

  include ActiveModel::Callbacks

  include ActiveModel::Naming

  include ActiveModel::Validations::ClassMethods

  include ActiveSupport::DescendantsTracker::ReloadedClassesFiltering

  include Orthoses::LazyTracePoint::MethodAddedHook

  include Orthoses::Mixin::Hook

  include Zeitwerk::ConstAdded

  include Module::Concerning
end
