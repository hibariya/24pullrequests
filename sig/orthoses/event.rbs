class Event < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Event, Event::ActiveRecord_Relation, ::Integer]
  extend Event::ActiveRecord_Persistence_ClassMethods
  include Event::GeneratedAssociationMethods
  include Event::GeneratedAttributeMethods
end

class Event::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Event::GeneratedRelationMethods
end

class Event::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include _ActiveRecord_Relation[Event, ::Integer]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Event::GeneratedRelationMethods
end

class Event::ActiveRecord_DisableJoinsAssociationRelation < ::ActiveRecord::DisableJoinsAssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Event::GeneratedRelationMethods
end

module Event::ActiveRecord_Persistence_ClassMethods
  def create: (?id: ::Integer, ?name: ::String?, ?location: ::String?, ?url: ::String?, ?start_time: ::ActiveSupport::TimeWithZone?, ?latitude: ::BigDecimal?, ?longitude: ::BigDecimal?, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, ?description: ::String?, ?user_id: ::Integer?, **untyped) ?{ (Event) -> void } -> Event
            | (::Array[Hash[Symbol, untyped]]) ?{ (Event) -> void } -> ::Array[Event]

  def create!: (?id: ::Integer, ?name: ::String?, ?location: ::String?, ?url: ::String?, ?start_time: ::ActiveSupport::TimeWithZone?, ?latitude: ::BigDecimal?, ?longitude: ::BigDecimal?, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, ?description: ::String?, ?user_id: ::Integer?, **untyped) ?{ (Event) -> void } -> Event
             | (::Array[Hash[Symbol, untyped]]) ?{ (Event) -> void } -> ::Array[Event]

  def build: (?id: ::Integer, ?name: ::String?, ?location: ::String?, ?url: ::String?, ?start_time: ::ActiveSupport::TimeWithZone?, ?latitude: ::BigDecimal?, ?longitude: ::BigDecimal?, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, ?description: ::String?, ?user_id: ::Integer?, **untyped) ?{ (Event) -> void } -> Event
           | (::Array[Hash[Symbol, untyped]]) ?{ (Event) -> void } -> ::Array[Event]
end

class Event::ActiveRecord_Relation < ::ActiveRecord::Relation
  include Event::GeneratedRelationMethods
  include _ActiveRecord_Relation[Event, ::Integer]
  include Enumerable[Event]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
end

module Event::GeneratedAssociationMethods
  def user: () -> User?

  def user=: (User?) -> User?

  def reload_user: () -> User?

  def build_user: (?untyped attributes) ?{ (User) -> void } -> User

  def create_user: (?untyped attributes) ?{ (User) -> void } -> User

  def create_user!: (?untyped attributes) ?{ (User) -> void } -> User
end

module Event::GeneratedAttributeMethods
  attr_accessor id: ::Integer

  def id_before_type_cast: () -> ::Integer

  def id_for_database: () -> ::Integer

  def id_came_from_user?: () -> bool

  def id?: () -> bool

  def id_previously_changed?: () -> bool

  def id_changed?: () -> bool

  def id_change: () -> [ ::Integer?, ::Integer? ]

  def id_will_change!: () -> void

  def id_was: () -> ::Integer?

  def id_previous_change: () -> Array[::Integer?]?

  def id_previously_was: () -> ::Integer?

  def restore_id!: () -> void

  def clear_id_change: () -> void

  def saved_change_to_id?: () -> bool

  def saved_change_to_id: () -> Array[::Integer?]?

  def id_before_last_save: () -> ::Integer?

  def will_save_change_to_id?: () -> bool

  def id_change_to_be_saved: () -> Array[::Integer?]?

  def id_in_database: () -> ::Integer?

  attr_accessor name: ::String?

  def name_before_type_cast: () -> ::String?

  def name_for_database: () -> ::String?

  def name_came_from_user?: () -> bool

  def name?: () -> bool

  def name_previously_changed?: () -> bool

  def name_changed?: () -> bool

  def name_change: () -> [ ::String?, ::String? ]

  def name_will_change!: () -> void

  def name_was: () -> ::String?

  def name_previous_change: () -> Array[::String?]?

  def name_previously_was: () -> ::String?

  def restore_name!: () -> void

  def clear_name_change: () -> void

  def saved_change_to_name?: () -> bool

  def saved_change_to_name: () -> Array[::String?]?

  def name_before_last_save: () -> ::String?

  def will_save_change_to_name?: () -> bool

  def name_change_to_be_saved: () -> Array[::String?]?

  def name_in_database: () -> ::String?

  attr_accessor location: ::String?

  def location_before_type_cast: () -> ::String?

  def location_for_database: () -> ::String?

  def location_came_from_user?: () -> bool

  def location?: () -> bool

  def location_previously_changed?: () -> bool

  def location_changed?: () -> bool

  def location_change: () -> [ ::String?, ::String? ]

  def location_will_change!: () -> void

  def location_was: () -> ::String?

  def location_previous_change: () -> Array[::String?]?

  def location_previously_was: () -> ::String?

  def restore_location!: () -> void

  def clear_location_change: () -> void

  def saved_change_to_location?: () -> bool

  def saved_change_to_location: () -> Array[::String?]?

  def location_before_last_save: () -> ::String?

  def will_save_change_to_location?: () -> bool

  def location_change_to_be_saved: () -> Array[::String?]?

  def location_in_database: () -> ::String?

  attr_accessor url: ::String?

  def url_before_type_cast: () -> ::String?

  def url_for_database: () -> ::String?

  def url_came_from_user?: () -> bool

  def url?: () -> bool

  def url_previously_changed?: () -> bool

  def url_changed?: () -> bool

  def url_change: () -> [ ::String?, ::String? ]

  def url_will_change!: () -> void

  def url_was: () -> ::String?

  def url_previous_change: () -> Array[::String?]?

  def url_previously_was: () -> ::String?

  def restore_url!: () -> void

  def clear_url_change: () -> void

  def saved_change_to_url?: () -> bool

  def saved_change_to_url: () -> Array[::String?]?

  def url_before_last_save: () -> ::String?

  def will_save_change_to_url?: () -> bool

  def url_change_to_be_saved: () -> Array[::String?]?

  def url_in_database: () -> ::String?

  attr_accessor start_time: ::ActiveSupport::TimeWithZone?

  def start_time_before_type_cast: () -> ::ActiveSupport::TimeWithZone?

  def start_time_for_database: () -> ::ActiveSupport::TimeWithZone?

  def start_time_came_from_user?: () -> bool

  def start_time?: () -> bool

  def start_time_previously_changed?: () -> bool

  def start_time_changed?: () -> bool

  def start_time_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def start_time_will_change!: () -> void

  def start_time_was: () -> ::ActiveSupport::TimeWithZone?

  def start_time_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def start_time_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_start_time!: () -> void

  def clear_start_time_change: () -> void

  def saved_change_to_start_time?: () -> bool

  def saved_change_to_start_time: () -> Array[::ActiveSupport::TimeWithZone?]?

  def start_time_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_start_time?: () -> bool

  def start_time_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def start_time_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor latitude: ::BigDecimal?

  def latitude_before_type_cast: () -> ::BigDecimal?

  def latitude_for_database: () -> ::BigDecimal?

  def latitude_came_from_user?: () -> bool

  def latitude?: () -> bool

  def latitude_previously_changed?: () -> bool

  def latitude_changed?: () -> bool

  def latitude_change: () -> [ ::BigDecimal?, ::BigDecimal? ]

  def latitude_will_change!: () -> void

  def latitude_was: () -> ::BigDecimal?

  def latitude_previous_change: () -> Array[::BigDecimal?]?

  def latitude_previously_was: () -> ::BigDecimal?

  def restore_latitude!: () -> void

  def clear_latitude_change: () -> void

  def saved_change_to_latitude?: () -> bool

  def saved_change_to_latitude: () -> Array[::BigDecimal?]?

  def latitude_before_last_save: () -> ::BigDecimal?

  def will_save_change_to_latitude?: () -> bool

  def latitude_change_to_be_saved: () -> Array[::BigDecimal?]?

  def latitude_in_database: () -> ::BigDecimal?

  attr_accessor longitude: ::BigDecimal?

  def longitude_before_type_cast: () -> ::BigDecimal?

  def longitude_for_database: () -> ::BigDecimal?

  def longitude_came_from_user?: () -> bool

  def longitude?: () -> bool

  def longitude_previously_changed?: () -> bool

  def longitude_changed?: () -> bool

  def longitude_change: () -> [ ::BigDecimal?, ::BigDecimal? ]

  def longitude_will_change!: () -> void

  def longitude_was: () -> ::BigDecimal?

  def longitude_previous_change: () -> Array[::BigDecimal?]?

  def longitude_previously_was: () -> ::BigDecimal?

  def restore_longitude!: () -> void

  def clear_longitude_change: () -> void

  def saved_change_to_longitude?: () -> bool

  def saved_change_to_longitude: () -> Array[::BigDecimal?]?

  def longitude_before_last_save: () -> ::BigDecimal?

  def will_save_change_to_longitude?: () -> bool

  def longitude_change_to_be_saved: () -> Array[::BigDecimal?]?

  def longitude_in_database: () -> ::BigDecimal?

  attr_accessor created_at: ::ActiveSupport::TimeWithZone

  def created_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone

  def created_at_for_database: () -> ::ActiveSupport::TimeWithZone

  def created_at_came_from_user?: () -> bool

  def created_at?: () -> bool

  def created_at_previously_changed?: () -> bool

  def created_at_changed?: () -> bool

  def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def created_at_will_change!: () -> void

  def created_at_was: () -> ::ActiveSupport::TimeWithZone?

  def created_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_created_at!: () -> void

  def clear_created_at_change: () -> void

  def saved_change_to_created_at?: () -> bool

  def saved_change_to_created_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_created_at?: () -> bool

  def created_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor updated_at: ::ActiveSupport::TimeWithZone

  def updated_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone

  def updated_at_for_database: () -> ::ActiveSupport::TimeWithZone

  def updated_at_came_from_user?: () -> bool

  def updated_at?: () -> bool

  def updated_at_previously_changed?: () -> bool

  def updated_at_changed?: () -> bool

  def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def updated_at_will_change!: () -> void

  def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

  def updated_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_updated_at!: () -> void

  def clear_updated_at_change: () -> void

  def saved_change_to_updated_at?: () -> bool

  def saved_change_to_updated_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_updated_at?: () -> bool

  def updated_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor description: ::String?

  def description_before_type_cast: () -> ::String?

  def description_for_database: () -> ::String?

  def description_came_from_user?: () -> bool

  def description?: () -> bool

  def description_previously_changed?: () -> bool

  def description_changed?: () -> bool

  def description_change: () -> [ ::String?, ::String? ]

  def description_will_change!: () -> void

  def description_was: () -> ::String?

  def description_previous_change: () -> Array[::String?]?

  def description_previously_was: () -> ::String?

  def restore_description!: () -> void

  def clear_description_change: () -> void

  def saved_change_to_description?: () -> bool

  def saved_change_to_description: () -> Array[::String?]?

  def description_before_last_save: () -> ::String?

  def will_save_change_to_description?: () -> bool

  def description_change_to_be_saved: () -> Array[::String?]?

  def description_in_database: () -> ::String?

  attr_accessor user_id: ::Integer?

  def user_id_before_type_cast: () -> ::Integer?

  def user_id_for_database: () -> ::Integer?

  def user_id_came_from_user?: () -> bool

  def user_id?: () -> bool

  def user_id_previously_changed?: () -> bool

  def user_id_changed?: () -> bool

  def user_id_change: () -> [ ::Integer?, ::Integer? ]

  def user_id_will_change!: () -> void

  def user_id_was: () -> ::Integer?

  def user_id_previous_change: () -> Array[::Integer?]?

  def user_id_previously_was: () -> ::Integer?

  def restore_user_id!: () -> void

  def clear_user_id_change: () -> void

  def saved_change_to_user_id?: () -> bool

  def saved_change_to_user_id: () -> Array[::Integer?]?

  def user_id_before_last_save: () -> ::Integer?

  def will_save_change_to_user_id?: () -> bool

  def user_id_change_to_be_saved: () -> Array[::Integer?]?

  def user_id_in_database: () -> ::Integer?
end

module Event::GeneratedRelationMethods
  def __callbacks: (*untyped, **untyped) -> untyped

  def _reflections: (*untyped, **untyped) -> untyped

  def _validators: (*untyped, **untyped) -> untyped

  def defined_enums: (*untyped, **untyped) -> untyped

  def counter_cached_association_names: (*untyped, **untyped) -> untyped

  include Kaminari::ConfigurationMethods::ClassMethods

  include Draper::Decoratable::ClassMethods

  include Kaminari::ActiveRecordExtension::ClassMethods

  include ActiveRecord::Normalization::ClassMethods

  include ActiveRecord::Suppressor::ClassMethods

  include ActiveRecord::SignedId::ClassMethods

  include ActiveRecord::TokenFor::ClassMethods

  include ActiveRecord::SecureToken::ClassMethods

  include ActiveRecord::Store::ClassMethods

  include ActiveRecord::Reflection::ClassMethods

  include ActiveRecord::NoTouching::ClassMethods

  include ActiveRecord::Transactions::ClassMethods

  include ActiveRecord::NestedAttributes::ClassMethods

  include ActiveRecord::AutosaveAssociation::ClassMethods

  include ActiveRecord::SecurePassword::ClassMethods

  include ActiveModel::SecurePassword::ClassMethods

  include ActiveRecord::Associations::ClassMethods

  include ActiveRecord::Timestamp::ClassMethods

  include ActiveModel::Validations::Callbacks::ClassMethods

  include ActiveRecord::Callbacks::ClassMethods

  include ActiveRecord::AttributeMethods::Serialization::ClassMethods

  include ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  include ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  include ActiveRecord::AttributeMethods::Write::ClassMethods

  include ActiveRecord::AttributeMethods::Read::ClassMethods

  include ActiveRecord::AttributeMethods::ClassMethods

  include ActiveModel::AttributeMethods::ClassMethods

  include ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  include ActiveRecord::Locking::Optimistic::ClassMethods

  include ActiveRecord::Attributes::ClassMethods

  include ActiveModel::AttributeRegistration::ClassMethods

  include ActiveRecord::CounterCache::ClassMethods

  include ActiveRecord::Validations::ClassMethods

  include ActiveRecord::Integration::ClassMethods

  include ActiveRecord::Sanitization::ClassMethods

  include ActiveRecord::Scoping::Named::ClassMethods

  include ActiveRecord::Scoping::Default::ClassMethods

  include ActiveRecord::Scoping::ClassMethods

  include ActiveRecord::Inheritance::ClassMethods

  include ActiveRecord::ModelSchema::ClassMethods

  include ActiveRecord::ReadonlyAttributes::ClassMethods

  include ActiveRecord::Persistence::ClassMethods

  include ActiveRecord::Core::ClassMethods

  include ActiveRecord::Aggregations::ClassMethods

  include ActiveRecord::Delegation::DelegateCache

  include ActiveRecord::Enum

  include ActiveRecord::DelegatedType

  include ActiveRecord::DynamicMatchers

  include ActiveRecord::Translation

  include ActiveRecord::Querying

  include ActiveRecord::QueryCache::ClassMethods

  include ActiveRecord::ConnectionHandling

  include ActiveSupport::Benchmarkable

  include ActiveModel::Conversion::ClassMethods

  include ActiveModel::Validations::HelperMethods

  include ActiveModel::Translation

  include ActiveSupport::DescendantsTracker

  include ActiveSupport::Callbacks::ClassMethods

  include ActiveModel::Callbacks

  include ActiveModel::Naming

  include ActiveModel::Validations::ClassMethods

  include ActiveSupport::DescendantsTracker::ReloadedClassesFiltering

  include Orthoses::LazyTracePoint::MethodAddedHook

  include Orthoses::Mixin::Hook

  include Zeitwerk::ConstAdded

  include Module::Concerning
end
