class Contribution < ::ApplicationRecord
  def self.year: (untyped year) -> Contribution::ActiveRecord_Relation
  def self.by_language: (untyped language) -> Contribution::ActiveRecord_Relation
  def self.latest: (untyped limit) -> Contribution::ActiveRecord_Relation
  def self.for_aggregation: () -> Contribution::ActiveRecord_Relation
  def self.excluding_organisations: (untyped excluded_organisations) -> Contribution::ActiveRecord_Relation
  extend _ActiveRecord_Relation_ClassMethods[Contribution, Contribution::ActiveRecord_Relation, ::Integer]
  extend Contribution::ActiveRecord_Persistence_ClassMethods
  include Contribution::GeneratedAssociationMethods
  include Contribution::GeneratedAttributeMethods
end

class Contribution::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Contribution::GeneratedRelationMethods
end

class Contribution::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include _ActiveRecord_Relation[Contribution, ::Integer]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Contribution::GeneratedRelationMethods
end

class Contribution::ActiveRecord_DisableJoinsAssociationRelation < ::ActiveRecord::DisableJoinsAssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include Contribution::GeneratedRelationMethods
end

module Contribution::ActiveRecord_Persistence_ClassMethods
  def create: (?id: ::Integer, ?title: ::String?, ?issue_url: ::String?, ?body: ::String?, ?state: ::String?, ?merged: bool?, ?created_at: ::ActiveSupport::TimeWithZone?, ?repo_name: ::String?, ?user_id: ::Integer?, ?language: ::String?, ?comments_count: ::Integer?, ?merged_by_id: ::Integer?, **untyped) ?{ (Contribution) -> void } -> Contribution
            | (::Array[Hash[Symbol, untyped]]) ?{ (Contribution) -> void } -> ::Array[Contribution]

  def create!: (?id: ::Integer, ?title: ::String?, ?issue_url: ::String?, ?body: ::String?, ?state: ::String?, ?merged: bool?, ?created_at: ::ActiveSupport::TimeWithZone?, ?repo_name: ::String?, ?user_id: ::Integer?, ?language: ::String?, ?comments_count: ::Integer?, ?merged_by_id: ::Integer?, **untyped) ?{ (Contribution) -> void } -> Contribution
             | (::Array[Hash[Symbol, untyped]]) ?{ (Contribution) -> void } -> ::Array[Contribution]

  def build: (?id: ::Integer, ?title: ::String?, ?issue_url: ::String?, ?body: ::String?, ?state: ::String?, ?merged: bool?, ?created_at: ::ActiveSupport::TimeWithZone?, ?repo_name: ::String?, ?user_id: ::Integer?, ?language: ::String?, ?comments_count: ::Integer?, ?merged_by_id: ::Integer?, **untyped) ?{ (Contribution) -> void } -> Contribution
           | (::Array[Hash[Symbol, untyped]]) ?{ (Contribution) -> void } -> ::Array[Contribution]
end

class Contribution::ActiveRecord_Relation < ::ActiveRecord::Relation
  include Contribution::GeneratedRelationMethods
  include _ActiveRecord_Relation[Contribution, ::Integer]
  include Enumerable[Contribution]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
end

module Contribution::GeneratedAssociationMethods
  def gifts: () -> ::Gift::ActiveRecord_Associations_CollectionProxy

  def gifts=: (::Gift::ActiveRecord_Associations_CollectionProxy | Array[Gift]) -> (::Gift::ActiveRecord_Associations_CollectionProxy | Array[Gift])

  def gift_ids: () -> Array[Integer]

  def gift_ids=: (Array[Integer]) -> Array[Integer]

  def user: () -> User?

  def user=: (User?) -> User?

  def reload_user: () -> User?

  def build_user: (?untyped attributes) ?{ (User) -> void } -> User

  def create_user: (?untyped attributes) ?{ (User) -> void } -> User

  def create_user!: (?untyped attributes) ?{ (User) -> void } -> User

  def merger: () -> User?

  def merger=: (User?) -> User?

  def reload_merger: () -> User?

  def build_merger: (?untyped attributes) ?{ (User) -> void } -> User

  def create_merger: (?untyped attributes) ?{ (User) -> void } -> User

  def create_merger!: (?untyped attributes) ?{ (User) -> void } -> User
end

module Contribution::GeneratedAttributeMethods
  attr_accessor id: ::Integer

  def id_before_type_cast: () -> ::Integer

  def id_for_database: () -> ::Integer

  def id_came_from_user?: () -> bool

  def id?: () -> bool

  def id_previously_changed?: () -> bool

  def id_changed?: () -> bool

  def id_change: () -> [ ::Integer?, ::Integer? ]

  def id_will_change!: () -> void

  def id_was: () -> ::Integer?

  def id_previous_change: () -> Array[::Integer?]?

  def id_previously_was: () -> ::Integer?

  def restore_id!: () -> void

  def clear_id_change: () -> void

  def saved_change_to_id?: () -> bool

  def saved_change_to_id: () -> Array[::Integer?]?

  def id_before_last_save: () -> ::Integer?

  def will_save_change_to_id?: () -> bool

  def id_change_to_be_saved: () -> Array[::Integer?]?

  def id_in_database: () -> ::Integer?

  attr_accessor title: ::String?

  def title_before_type_cast: () -> ::String?

  def title_for_database: () -> ::String?

  def title_came_from_user?: () -> bool

  def title?: () -> bool

  def title_previously_changed?: () -> bool

  def title_changed?: () -> bool

  def title_change: () -> [ ::String?, ::String? ]

  def title_will_change!: () -> void

  def title_was: () -> ::String?

  def title_previous_change: () -> Array[::String?]?

  def title_previously_was: () -> ::String?

  def restore_title!: () -> void

  def clear_title_change: () -> void

  def saved_change_to_title?: () -> bool

  def saved_change_to_title: () -> Array[::String?]?

  def title_before_last_save: () -> ::String?

  def will_save_change_to_title?: () -> bool

  def title_change_to_be_saved: () -> Array[::String?]?

  def title_in_database: () -> ::String?

  attr_accessor issue_url: ::String?

  def issue_url_before_type_cast: () -> ::String?

  def issue_url_for_database: () -> ::String?

  def issue_url_came_from_user?: () -> bool

  def issue_url?: () -> bool

  def issue_url_previously_changed?: () -> bool

  def issue_url_changed?: () -> bool

  def issue_url_change: () -> [ ::String?, ::String? ]

  def issue_url_will_change!: () -> void

  def issue_url_was: () -> ::String?

  def issue_url_previous_change: () -> Array[::String?]?

  def issue_url_previously_was: () -> ::String?

  def restore_issue_url!: () -> void

  def clear_issue_url_change: () -> void

  def saved_change_to_issue_url?: () -> bool

  def saved_change_to_issue_url: () -> Array[::String?]?

  def issue_url_before_last_save: () -> ::String?

  def will_save_change_to_issue_url?: () -> bool

  def issue_url_change_to_be_saved: () -> Array[::String?]?

  def issue_url_in_database: () -> ::String?

  attr_accessor body: ::String?

  def body_before_type_cast: () -> ::String?

  def body_for_database: () -> ::String?

  def body_came_from_user?: () -> bool

  def body?: () -> bool

  def body_previously_changed?: () -> bool

  def body_changed?: () -> bool

  def body_change: () -> [ ::String?, ::String? ]

  def body_will_change!: () -> void

  def body_was: () -> ::String?

  def body_previous_change: () -> Array[::String?]?

  def body_previously_was: () -> ::String?

  def restore_body!: () -> void

  def clear_body_change: () -> void

  def saved_change_to_body?: () -> bool

  def saved_change_to_body: () -> Array[::String?]?

  def body_before_last_save: () -> ::String?

  def will_save_change_to_body?: () -> bool

  def body_change_to_be_saved: () -> Array[::String?]?

  def body_in_database: () -> ::String?

  attr_accessor state: ::String?

  def state_before_type_cast: () -> ::String?

  def state_for_database: () -> ::String?

  def state_came_from_user?: () -> bool

  def state?: () -> bool

  def state_previously_changed?: () -> bool

  def state_changed?: () -> bool

  def state_change: () -> [ ::String?, ::String? ]

  def state_will_change!: () -> void

  def state_was: () -> ::String?

  def state_previous_change: () -> Array[::String?]?

  def state_previously_was: () -> ::String?

  def restore_state!: () -> void

  def clear_state_change: () -> void

  def saved_change_to_state?: () -> bool

  def saved_change_to_state: () -> Array[::String?]?

  def state_before_last_save: () -> ::String?

  def will_save_change_to_state?: () -> bool

  def state_change_to_be_saved: () -> Array[::String?]?

  def state_in_database: () -> ::String?

  attr_accessor merged: bool?

  def merged_before_type_cast: () -> bool?

  def merged_for_database: () -> bool?

  def merged_came_from_user?: () -> bool

  def merged?: () -> bool

  def merged_previously_changed?: () -> bool

  def merged_changed?: () -> bool

  def merged_change: () -> [ bool?, bool? ]

  def merged_will_change!: () -> void

  def merged_was: () -> bool?

  def merged_previous_change: () -> Array[bool?]?

  def merged_previously_was: () -> bool?

  def restore_merged!: () -> void

  def clear_merged_change: () -> void

  def saved_change_to_merged?: () -> bool

  def saved_change_to_merged: () -> Array[bool?]?

  def merged_before_last_save: () -> bool?

  def will_save_change_to_merged?: () -> bool

  def merged_change_to_be_saved: () -> Array[bool?]?

  def merged_in_database: () -> bool?

  attr_accessor created_at: ::ActiveSupport::TimeWithZone?

  def created_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone?

  def created_at_for_database: () -> ::ActiveSupport::TimeWithZone?

  def created_at_came_from_user?: () -> bool

  def created_at?: () -> bool

  def created_at_previously_changed?: () -> bool

  def created_at_changed?: () -> bool

  def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def created_at_will_change!: () -> void

  def created_at_was: () -> ::ActiveSupport::TimeWithZone?

  def created_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_created_at!: () -> void

  def clear_created_at_change: () -> void

  def saved_change_to_created_at?: () -> bool

  def saved_change_to_created_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_created_at?: () -> bool

  def created_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor repo_name: ::String?

  def repo_name_before_type_cast: () -> ::String?

  def repo_name_for_database: () -> ::String?

  def repo_name_came_from_user?: () -> bool

  def repo_name?: () -> bool

  def repo_name_previously_changed?: () -> bool

  def repo_name_changed?: () -> bool

  def repo_name_change: () -> [ ::String?, ::String? ]

  def repo_name_will_change!: () -> void

  def repo_name_was: () -> ::String?

  def repo_name_previous_change: () -> Array[::String?]?

  def repo_name_previously_was: () -> ::String?

  def restore_repo_name!: () -> void

  def clear_repo_name_change: () -> void

  def saved_change_to_repo_name?: () -> bool

  def saved_change_to_repo_name: () -> Array[::String?]?

  def repo_name_before_last_save: () -> ::String?

  def will_save_change_to_repo_name?: () -> bool

  def repo_name_change_to_be_saved: () -> Array[::String?]?

  def repo_name_in_database: () -> ::String?

  attr_accessor user_id: ::Integer?

  def user_id_before_type_cast: () -> ::Integer?

  def user_id_for_database: () -> ::Integer?

  def user_id_came_from_user?: () -> bool

  def user_id?: () -> bool

  def user_id_previously_changed?: () -> bool

  def user_id_changed?: () -> bool

  def user_id_change: () -> [ ::Integer?, ::Integer? ]

  def user_id_will_change!: () -> void

  def user_id_was: () -> ::Integer?

  def user_id_previous_change: () -> Array[::Integer?]?

  def user_id_previously_was: () -> ::Integer?

  def restore_user_id!: () -> void

  def clear_user_id_change: () -> void

  def saved_change_to_user_id?: () -> bool

  def saved_change_to_user_id: () -> Array[::Integer?]?

  def user_id_before_last_save: () -> ::Integer?

  def will_save_change_to_user_id?: () -> bool

  def user_id_change_to_be_saved: () -> Array[::Integer?]?

  def user_id_in_database: () -> ::Integer?

  attr_accessor language: ::String?

  def language_before_type_cast: () -> ::String?

  def language_for_database: () -> ::String?

  def language_came_from_user?: () -> bool

  def language?: () -> bool

  def language_previously_changed?: () -> bool

  def language_changed?: () -> bool

  def language_change: () -> [ ::String?, ::String? ]

  def language_will_change!: () -> void

  def language_was: () -> ::String?

  def language_previous_change: () -> Array[::String?]?

  def language_previously_was: () -> ::String?

  def restore_language!: () -> void

  def clear_language_change: () -> void

  def saved_change_to_language?: () -> bool

  def saved_change_to_language: () -> Array[::String?]?

  def language_before_last_save: () -> ::String?

  def will_save_change_to_language?: () -> bool

  def language_change_to_be_saved: () -> Array[::String?]?

  def language_in_database: () -> ::String?

  attr_accessor comments_count: ::Integer?

  def comments_count_before_type_cast: () -> ::Integer?

  def comments_count_for_database: () -> ::Integer?

  def comments_count_came_from_user?: () -> bool

  def comments_count?: () -> bool

  def comments_count_previously_changed?: () -> bool

  def comments_count_changed?: () -> bool

  def comments_count_change: () -> [ ::Integer?, ::Integer? ]

  def comments_count_will_change!: () -> void

  def comments_count_was: () -> ::Integer?

  def comments_count_previous_change: () -> Array[::Integer?]?

  def comments_count_previously_was: () -> ::Integer?

  def restore_comments_count!: () -> void

  def clear_comments_count_change: () -> void

  def saved_change_to_comments_count?: () -> bool

  def saved_change_to_comments_count: () -> Array[::Integer?]?

  def comments_count_before_last_save: () -> ::Integer?

  def will_save_change_to_comments_count?: () -> bool

  def comments_count_change_to_be_saved: () -> Array[::Integer?]?

  def comments_count_in_database: () -> ::Integer?

  attr_accessor merged_by_id: ::Integer?

  def merged_by_id_before_type_cast: () -> ::Integer?

  def merged_by_id_for_database: () -> ::Integer?

  def merged_by_id_came_from_user?: () -> bool

  def merged_by_id?: () -> bool

  def merged_by_id_previously_changed?: () -> bool

  def merged_by_id_changed?: () -> bool

  def merged_by_id_change: () -> [ ::Integer?, ::Integer? ]

  def merged_by_id_will_change!: () -> void

  def merged_by_id_was: () -> ::Integer?

  def merged_by_id_previous_change: () -> Array[::Integer?]?

  def merged_by_id_previously_was: () -> ::Integer?

  def restore_merged_by_id!: () -> void

  def clear_merged_by_id_change: () -> void

  def saved_change_to_merged_by_id?: () -> bool

  def saved_change_to_merged_by_id: () -> Array[::Integer?]?

  def merged_by_id_before_last_save: () -> ::Integer?

  def will_save_change_to_merged_by_id?: () -> bool

  def merged_by_id_change_to_be_saved: () -> Array[::Integer?]?

  def merged_by_id_in_database: () -> ::Integer?
end

module Contribution::GeneratedRelationMethods
  def year: (*untyped, **untyped) -> untyped

  def by_language: (*untyped, **untyped) -> untyped

  def latest: (*untyped, **untyped) -> untyped

  def for_aggregation: (*untyped, **untyped) -> untyped

  def excluding_organisations: (*untyped, **untyped) -> untyped

  def __callbacks: (*untyped, **untyped) -> untyped

  def defined_enums: (*untyped, **untyped) -> untyped

  def counter_cached_association_names: (*untyped, **untyped) -> untyped

  def _validators: (*untyped, **untyped) -> untyped

  def in_date_range?: (*untyped, **untyped) -> untyped

  def create_from_github: (*untyped, **untyped) -> untyped

  def active_users: (*untyped, **untyped) -> untyped

  def _reflections: (*untyped, **untyped) -> untyped

  def initialize_from_github: (*untyped, **untyped) -> untyped

  include Kaminari::ConfigurationMethods::ClassMethods

  include Draper::Decoratable::ClassMethods

  include Kaminari::ActiveRecordExtension::ClassMethods

  include ActiveRecord::Normalization::ClassMethods

  include ActiveRecord::Suppressor::ClassMethods

  include ActiveRecord::SignedId::ClassMethods

  include ActiveRecord::TokenFor::ClassMethods

  include ActiveRecord::SecureToken::ClassMethods

  include ActiveRecord::Store::ClassMethods

  include ActiveRecord::Reflection::ClassMethods

  include ActiveRecord::NoTouching::ClassMethods

  include ActiveRecord::Transactions::ClassMethods

  include ActiveRecord::NestedAttributes::ClassMethods

  include ActiveRecord::AutosaveAssociation::ClassMethods

  include ActiveRecord::SecurePassword::ClassMethods

  include ActiveModel::SecurePassword::ClassMethods

  include ActiveRecord::Associations::ClassMethods

  include ActiveRecord::Timestamp::ClassMethods

  include ActiveModel::Validations::Callbacks::ClassMethods

  include ActiveRecord::Callbacks::ClassMethods

  include ActiveRecord::AttributeMethods::Serialization::ClassMethods

  include ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  include ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  include ActiveRecord::AttributeMethods::Write::ClassMethods

  include ActiveRecord::AttributeMethods::Read::ClassMethods

  include ActiveRecord::AttributeMethods::ClassMethods

  include ActiveModel::AttributeMethods::ClassMethods

  include ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  include ActiveRecord::Locking::Optimistic::ClassMethods

  include ActiveRecord::Attributes::ClassMethods

  include ActiveModel::AttributeRegistration::ClassMethods

  include ActiveRecord::CounterCache::ClassMethods

  include ActiveRecord::Validations::ClassMethods

  include ActiveRecord::Integration::ClassMethods

  include ActiveRecord::Sanitization::ClassMethods

  include ActiveRecord::Scoping::Named::ClassMethods

  include ActiveRecord::Scoping::Default::ClassMethods

  include ActiveRecord::Scoping::ClassMethods

  include ActiveRecord::Inheritance::ClassMethods

  include ActiveRecord::ModelSchema::ClassMethods

  include ActiveRecord::ReadonlyAttributes::ClassMethods

  include ActiveRecord::Persistence::ClassMethods

  include ActiveRecord::Core::ClassMethods

  include ActiveRecord::Aggregations::ClassMethods

  include ActiveRecord::Delegation::DelegateCache

  include ActiveRecord::Enum

  include ActiveRecord::DelegatedType

  include ActiveRecord::DynamicMatchers

  include ActiveRecord::Translation

  include ActiveRecord::Querying

  include ActiveRecord::QueryCache::ClassMethods

  include ActiveRecord::ConnectionHandling

  include ActiveSupport::Benchmarkable

  include ActiveModel::Conversion::ClassMethods

  include ActiveModel::Validations::HelperMethods

  include ActiveModel::Translation

  include ActiveSupport::DescendantsTracker

  include ActiveSupport::Callbacks::ClassMethods

  include ActiveModel::Callbacks

  include ActiveModel::Naming

  include ActiveModel::Validations::ClassMethods

  include ActiveSupport::DescendantsTracker::ReloadedClassesFiltering

  include Orthoses::LazyTracePoint::MethodAddedHook

  include Orthoses::Mixin::Hook

  include Zeitwerk::ConstAdded

  include Module::Concerning
end
