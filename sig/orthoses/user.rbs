class User < ::ApplicationRecord
  # defined by `delegate` to: #github_client
  def high_rate_limit?: (*untyped, **untyped) -> untyped
  def self.by_language: (untyped language) -> User::ActiveRecord_Relation
  def self.with_any_contributions: () -> User::ActiveRecord_Relation
  def self.random: () -> User::ActiveRecord_Relation
  def self.by_nickname: (untyped nickname) -> User::ActiveRecord_Relation
  def self.active: () -> User::ActiveRecord_Relation
  extend _ActiveRecord_Relation_ClassMethods[User, User::ActiveRecord_Relation, ::Integer]
  extend User::ActiveRecord_Persistence_ClassMethods
  include User::GeneratedAssociationMethods
  include User::GeneratedAttributeMethods
end

class User::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include User::GeneratedRelationMethods
end

class User::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include _ActiveRecord_Relation[User, ::Integer]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include User::GeneratedRelationMethods
end

class User::ActiveRecord_DisableJoinsAssociationRelation < ::ActiveRecord::DisableJoinsAssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
  include User::GeneratedRelationMethods
end

module User::ActiveRecord_Persistence_ClassMethods
  def create: (?id: ::Integer, ?uid: ::Integer, ?provider: ::String, ?nickname: ::String, ?email: ::String?, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, ?gravatar_id: ::String?, ?token: ::String?, ?email_frequency: ::String?, ?contributions_count: ::Integer?, ?last_sent_at: ::ActiveSupport::TimeWithZone?, ?twitter_token: ::String?, ?twitter_secret: ::String?, ?twitter_nickname: ::String?, ?confirmation_token: ::String?, ?confirmed_at: ::ActiveSupport::TimeWithZone?, ?name: ::String?, ?blog: ::String?, ?location: ::String?, ?thank_you_email_sent: bool?, ?lat: ::BigDecimal?, ?lng: ::BigDecimal?, ?ignored_organisations: ::String?, ?unsubscribe_token: ::String, ?time_zone: ::String?, ?invalid_token: bool?, **untyped) ?{ (User) -> void } -> User
            | (::Array[Hash[Symbol, untyped]]) ?{ (User) -> void } -> ::Array[User]

  def create!: (?id: ::Integer, ?uid: ::Integer, ?provider: ::String, ?nickname: ::String, ?email: ::String?, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, ?gravatar_id: ::String?, ?token: ::String?, ?email_frequency: ::String?, ?contributions_count: ::Integer?, ?last_sent_at: ::ActiveSupport::TimeWithZone?, ?twitter_token: ::String?, ?twitter_secret: ::String?, ?twitter_nickname: ::String?, ?confirmation_token: ::String?, ?confirmed_at: ::ActiveSupport::TimeWithZone?, ?name: ::String?, ?blog: ::String?, ?location: ::String?, ?thank_you_email_sent: bool?, ?lat: ::BigDecimal?, ?lng: ::BigDecimal?, ?ignored_organisations: ::String?, ?unsubscribe_token: ::String, ?time_zone: ::String?, ?invalid_token: bool?, **untyped) ?{ (User) -> void } -> User
             | (::Array[Hash[Symbol, untyped]]) ?{ (User) -> void } -> ::Array[User]

  def build: (?id: ::Integer, ?uid: ::Integer, ?provider: ::String, ?nickname: ::String, ?email: ::String?, ?created_at: ::ActiveSupport::TimeWithZone, ?updated_at: ::ActiveSupport::TimeWithZone, ?gravatar_id: ::String?, ?token: ::String?, ?email_frequency: ::String?, ?contributions_count: ::Integer?, ?last_sent_at: ::ActiveSupport::TimeWithZone?, ?twitter_token: ::String?, ?twitter_secret: ::String?, ?twitter_nickname: ::String?, ?confirmation_token: ::String?, ?confirmed_at: ::ActiveSupport::TimeWithZone?, ?name: ::String?, ?blog: ::String?, ?location: ::String?, ?thank_you_email_sent: bool?, ?lat: ::BigDecimal?, ?lng: ::BigDecimal?, ?ignored_organisations: ::String?, ?unsubscribe_token: ::String, ?time_zone: ::String?, ?invalid_token: bool?, **untyped) ?{ (User) -> void } -> User
           | (::Array[Hash[Symbol, untyped]]) ?{ (User) -> void } -> ::Array[User]
end

class User::ActiveRecord_Relation < ::ActiveRecord::Relation
  include User::GeneratedRelationMethods
  include _ActiveRecord_Relation[User, ::Integer]
  include Enumerable[User]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ApplicationRecord::GeneratedRelationMethods
end

module User::GeneratedAssociationMethods
  def contributions: () -> ::Contribution::ActiveRecord_Associations_CollectionProxy

  def contributions=: (::Contribution::ActiveRecord_Associations_CollectionProxy | Array[Contribution]) -> (::Contribution::ActiveRecord_Associations_CollectionProxy | Array[Contribution])

  def contribution_ids: () -> Array[Integer]

  def contribution_ids=: (Array[Integer]) -> Array[Integer]

  def skills: () -> ::Skill::ActiveRecord_Associations_CollectionProxy

  def skills=: (::Skill::ActiveRecord_Associations_CollectionProxy | Array[Skill]) -> (::Skill::ActiveRecord_Associations_CollectionProxy | Array[Skill])

  def skill_ids: () -> Array[Integer]

  def skill_ids=: (Array[Integer]) -> Array[Integer]

  def gifts: () -> ::Gift::ActiveRecord_Associations_CollectionProxy

  def gifts=: (::Gift::ActiveRecord_Associations_CollectionProxy | Array[Gift]) -> (::Gift::ActiveRecord_Associations_CollectionProxy | Array[Gift])

  def gift_ids: () -> Array[Integer]

  def gift_ids=: (Array[Integer]) -> Array[Integer]

  def aggregation_filters: () -> ::AggregationFilter::ActiveRecord_Associations_CollectionProxy

  def aggregation_filters=: (::AggregationFilter::ActiveRecord_Associations_CollectionProxy | Array[AggregationFilter]) -> (::AggregationFilter::ActiveRecord_Associations_CollectionProxy | Array[AggregationFilter])

  def aggregation_filter_ids: () -> Array[Integer]

  def aggregation_filter_ids=: (Array[Integer]) -> Array[Integer]

  def projects: () -> ::Project::ActiveRecord_Associations_CollectionProxy

  def projects=: (::Project::ActiveRecord_Associations_CollectionProxy | Array[Project]) -> (::Project::ActiveRecord_Associations_CollectionProxy | Array[Project])

  def project_ids: () -> Array[Integer]

  def project_ids=: (Array[Integer]) -> Array[Integer]

  def events: () -> ::Event::ActiveRecord_Associations_CollectionProxy

  def events=: (::Event::ActiveRecord_Associations_CollectionProxy | Array[Event]) -> (::Event::ActiveRecord_Associations_CollectionProxy | Array[Event])

  def event_ids: () -> Array[Integer]

  def event_ids=: (Array[Integer]) -> Array[Integer]

  def merged_contributions: () -> ::Contribution::ActiveRecord_Associations_CollectionProxy

  def merged_contributions=: (::Contribution::ActiveRecord_Associations_CollectionProxy | Array[Contribution]) -> (::Contribution::ActiveRecord_Associations_CollectionProxy | Array[Contribution])

  def merged_contribution_ids: () -> Array[Integer]

  def merged_contribution_ids=: (Array[Integer]) -> Array[Integer]
end

module User::GeneratedAttributeMethods
  attr_accessor id: ::Integer

  def id_before_type_cast: () -> ::Integer

  def id_for_database: () -> ::Integer

  def id_came_from_user?: () -> bool

  def id?: () -> bool

  def id_previously_changed?: () -> bool

  def id_changed?: () -> bool

  def id_change: () -> [ ::Integer?, ::Integer? ]

  def id_will_change!: () -> void

  def id_was: () -> ::Integer?

  def id_previous_change: () -> Array[::Integer?]?

  def id_previously_was: () -> ::Integer?

  def restore_id!: () -> void

  def clear_id_change: () -> void

  def saved_change_to_id?: () -> bool

  def saved_change_to_id: () -> Array[::Integer?]?

  def id_before_last_save: () -> ::Integer?

  def will_save_change_to_id?: () -> bool

  def id_change_to_be_saved: () -> Array[::Integer?]?

  def id_in_database: () -> ::Integer?

  attr_accessor uid: ::Integer

  def uid_before_type_cast: () -> ::Integer

  def uid_for_database: () -> ::Integer

  def uid_came_from_user?: () -> bool

  def uid?: () -> bool

  def uid_previously_changed?: () -> bool

  def uid_changed?: () -> bool

  def uid_change: () -> [ ::Integer?, ::Integer? ]

  def uid_will_change!: () -> void

  def uid_was: () -> ::Integer?

  def uid_previous_change: () -> Array[::Integer?]?

  def uid_previously_was: () -> ::Integer?

  def restore_uid!: () -> void

  def clear_uid_change: () -> void

  def saved_change_to_uid?: () -> bool

  def saved_change_to_uid: () -> Array[::Integer?]?

  def uid_before_last_save: () -> ::Integer?

  def will_save_change_to_uid?: () -> bool

  def uid_change_to_be_saved: () -> Array[::Integer?]?

  def uid_in_database: () -> ::Integer?

  attr_accessor provider: ::String

  def provider_before_type_cast: () -> ::String

  def provider_for_database: () -> ::String

  def provider_came_from_user?: () -> bool

  def provider?: () -> bool

  def provider_previously_changed?: () -> bool

  def provider_changed?: () -> bool

  def provider_change: () -> [ ::String?, ::String? ]

  def provider_will_change!: () -> void

  def provider_was: () -> ::String?

  def provider_previous_change: () -> Array[::String?]?

  def provider_previously_was: () -> ::String?

  def restore_provider!: () -> void

  def clear_provider_change: () -> void

  def saved_change_to_provider?: () -> bool

  def saved_change_to_provider: () -> Array[::String?]?

  def provider_before_last_save: () -> ::String?

  def will_save_change_to_provider?: () -> bool

  def provider_change_to_be_saved: () -> Array[::String?]?

  def provider_in_database: () -> ::String?

  attr_accessor nickname: ::String

  def nickname_before_type_cast: () -> ::String

  def nickname_for_database: () -> ::String

  def nickname_came_from_user?: () -> bool

  def nickname?: () -> bool

  def nickname_previously_changed?: () -> bool

  def nickname_changed?: () -> bool

  def nickname_change: () -> [ ::String?, ::String? ]

  def nickname_will_change!: () -> void

  def nickname_was: () -> ::String?

  def nickname_previous_change: () -> Array[::String?]?

  def nickname_previously_was: () -> ::String?

  def restore_nickname!: () -> void

  def clear_nickname_change: () -> void

  def saved_change_to_nickname?: () -> bool

  def saved_change_to_nickname: () -> Array[::String?]?

  def nickname_before_last_save: () -> ::String?

  def will_save_change_to_nickname?: () -> bool

  def nickname_change_to_be_saved: () -> Array[::String?]?

  def nickname_in_database: () -> ::String?

  attr_accessor email: ::String?

  def email_before_type_cast: () -> ::String?

  def email_for_database: () -> ::String?

  def email_came_from_user?: () -> bool

  def email?: () -> bool

  def email_previously_changed?: () -> bool

  def email_changed?: () -> bool

  def email_change: () -> [ ::String?, ::String? ]

  def email_will_change!: () -> void

  def email_was: () -> ::String?

  def email_previous_change: () -> Array[::String?]?

  def email_previously_was: () -> ::String?

  def restore_email!: () -> void

  def clear_email_change: () -> void

  def saved_change_to_email?: () -> bool

  def saved_change_to_email: () -> Array[::String?]?

  def email_before_last_save: () -> ::String?

  def will_save_change_to_email?: () -> bool

  def email_change_to_be_saved: () -> Array[::String?]?

  def email_in_database: () -> ::String?

  attr_accessor created_at: ::ActiveSupport::TimeWithZone

  def created_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone

  def created_at_for_database: () -> ::ActiveSupport::TimeWithZone

  def created_at_came_from_user?: () -> bool

  def created_at?: () -> bool

  def created_at_previously_changed?: () -> bool

  def created_at_changed?: () -> bool

  def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def created_at_will_change!: () -> void

  def created_at_was: () -> ::ActiveSupport::TimeWithZone?

  def created_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_created_at!: () -> void

  def clear_created_at_change: () -> void

  def saved_change_to_created_at?: () -> bool

  def saved_change_to_created_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_created_at?: () -> bool

  def created_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor updated_at: ::ActiveSupport::TimeWithZone

  def updated_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone

  def updated_at_for_database: () -> ::ActiveSupport::TimeWithZone

  def updated_at_came_from_user?: () -> bool

  def updated_at?: () -> bool

  def updated_at_previously_changed?: () -> bool

  def updated_at_changed?: () -> bool

  def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def updated_at_will_change!: () -> void

  def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

  def updated_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_updated_at!: () -> void

  def clear_updated_at_change: () -> void

  def saved_change_to_updated_at?: () -> bool

  def saved_change_to_updated_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_updated_at?: () -> bool

  def updated_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor gravatar_id: ::String?

  def gravatar_id_before_type_cast: () -> ::String?

  def gravatar_id_for_database: () -> ::String?

  def gravatar_id_came_from_user?: () -> bool

  def gravatar_id?: () -> bool

  def gravatar_id_previously_changed?: () -> bool

  def gravatar_id_changed?: () -> bool

  def gravatar_id_change: () -> [ ::String?, ::String? ]

  def gravatar_id_will_change!: () -> void

  def gravatar_id_was: () -> ::String?

  def gravatar_id_previous_change: () -> Array[::String?]?

  def gravatar_id_previously_was: () -> ::String?

  def restore_gravatar_id!: () -> void

  def clear_gravatar_id_change: () -> void

  def saved_change_to_gravatar_id?: () -> bool

  def saved_change_to_gravatar_id: () -> Array[::String?]?

  def gravatar_id_before_last_save: () -> ::String?

  def will_save_change_to_gravatar_id?: () -> bool

  def gravatar_id_change_to_be_saved: () -> Array[::String?]?

  def gravatar_id_in_database: () -> ::String?

  attr_accessor token: ::String?

  def token_before_type_cast: () -> ::String?

  def token_for_database: () -> ::String?

  def token_came_from_user?: () -> bool

  def token?: () -> bool

  def token_previously_changed?: () -> bool

  def token_changed?: () -> bool

  def token_change: () -> [ ::String?, ::String? ]

  def token_will_change!: () -> void

  def token_was: () -> ::String?

  def token_previous_change: () -> Array[::String?]?

  def token_previously_was: () -> ::String?

  def restore_token!: () -> void

  def clear_token_change: () -> void

  def saved_change_to_token?: () -> bool

  def saved_change_to_token: () -> Array[::String?]?

  def token_before_last_save: () -> ::String?

  def will_save_change_to_token?: () -> bool

  def token_change_to_be_saved: () -> Array[::String?]?

  def token_in_database: () -> ::String?

  attr_accessor email_frequency: ::String?

  def email_frequency_before_type_cast: () -> ::String?

  def email_frequency_for_database: () -> ::String?

  def email_frequency_came_from_user?: () -> bool

  def email_frequency?: () -> bool

  def email_frequency_previously_changed?: () -> bool

  def email_frequency_changed?: () -> bool

  def email_frequency_change: () -> [ ::String?, ::String? ]

  def email_frequency_will_change!: () -> void

  def email_frequency_was: () -> ::String?

  def email_frequency_previous_change: () -> Array[::String?]?

  def email_frequency_previously_was: () -> ::String?

  def restore_email_frequency!: () -> void

  def clear_email_frequency_change: () -> void

  def saved_change_to_email_frequency?: () -> bool

  def saved_change_to_email_frequency: () -> Array[::String?]?

  def email_frequency_before_last_save: () -> ::String?

  def will_save_change_to_email_frequency?: () -> bool

  def email_frequency_change_to_be_saved: () -> Array[::String?]?

  def email_frequency_in_database: () -> ::String?

  attr_accessor contributions_count: ::Integer?

  def contributions_count_before_type_cast: () -> ::Integer?

  def contributions_count_for_database: () -> ::Integer?

  def contributions_count_came_from_user?: () -> bool

  def contributions_count?: () -> bool

  def contributions_count_previously_changed?: () -> bool

  def contributions_count_changed?: () -> bool

  def contributions_count_change: () -> [ ::Integer?, ::Integer? ]

  def contributions_count_will_change!: () -> void

  def contributions_count_was: () -> ::Integer?

  def contributions_count_previous_change: () -> Array[::Integer?]?

  def contributions_count_previously_was: () -> ::Integer?

  def restore_contributions_count!: () -> void

  def clear_contributions_count_change: () -> void

  def saved_change_to_contributions_count?: () -> bool

  def saved_change_to_contributions_count: () -> Array[::Integer?]?

  def contributions_count_before_last_save: () -> ::Integer?

  def will_save_change_to_contributions_count?: () -> bool

  def contributions_count_change_to_be_saved: () -> Array[::Integer?]?

  def contributions_count_in_database: () -> ::Integer?

  attr_accessor last_sent_at: ::ActiveSupport::TimeWithZone?

  def last_sent_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone?

  def last_sent_at_for_database: () -> ::ActiveSupport::TimeWithZone?

  def last_sent_at_came_from_user?: () -> bool

  def last_sent_at?: () -> bool

  def last_sent_at_previously_changed?: () -> bool

  def last_sent_at_changed?: () -> bool

  def last_sent_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def last_sent_at_will_change!: () -> void

  def last_sent_at_was: () -> ::ActiveSupport::TimeWithZone?

  def last_sent_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def last_sent_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_last_sent_at!: () -> void

  def clear_last_sent_at_change: () -> void

  def saved_change_to_last_sent_at?: () -> bool

  def saved_change_to_last_sent_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def last_sent_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_last_sent_at?: () -> bool

  def last_sent_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def last_sent_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor twitter_token: ::String?

  def twitter_token_before_type_cast: () -> ::String?

  def twitter_token_for_database: () -> ::String?

  def twitter_token_came_from_user?: () -> bool

  def twitter_token?: () -> bool

  def twitter_token_previously_changed?: () -> bool

  def twitter_token_changed?: () -> bool

  def twitter_token_change: () -> [ ::String?, ::String? ]

  def twitter_token_will_change!: () -> void

  def twitter_token_was: () -> ::String?

  def twitter_token_previous_change: () -> Array[::String?]?

  def twitter_token_previously_was: () -> ::String?

  def restore_twitter_token!: () -> void

  def clear_twitter_token_change: () -> void

  def saved_change_to_twitter_token?: () -> bool

  def saved_change_to_twitter_token: () -> Array[::String?]?

  def twitter_token_before_last_save: () -> ::String?

  def will_save_change_to_twitter_token?: () -> bool

  def twitter_token_change_to_be_saved: () -> Array[::String?]?

  def twitter_token_in_database: () -> ::String?

  attr_accessor twitter_secret: ::String?

  def twitter_secret_before_type_cast: () -> ::String?

  def twitter_secret_for_database: () -> ::String?

  def twitter_secret_came_from_user?: () -> bool

  def twitter_secret?: () -> bool

  def twitter_secret_previously_changed?: () -> bool

  def twitter_secret_changed?: () -> bool

  def twitter_secret_change: () -> [ ::String?, ::String? ]

  def twitter_secret_will_change!: () -> void

  def twitter_secret_was: () -> ::String?

  def twitter_secret_previous_change: () -> Array[::String?]?

  def twitter_secret_previously_was: () -> ::String?

  def restore_twitter_secret!: () -> void

  def clear_twitter_secret_change: () -> void

  def saved_change_to_twitter_secret?: () -> bool

  def saved_change_to_twitter_secret: () -> Array[::String?]?

  def twitter_secret_before_last_save: () -> ::String?

  def will_save_change_to_twitter_secret?: () -> bool

  def twitter_secret_change_to_be_saved: () -> Array[::String?]?

  def twitter_secret_in_database: () -> ::String?

  attr_accessor twitter_nickname: ::String?

  def twitter_nickname_before_type_cast: () -> ::String?

  def twitter_nickname_for_database: () -> ::String?

  def twitter_nickname_came_from_user?: () -> bool

  def twitter_nickname?: () -> bool

  def twitter_nickname_previously_changed?: () -> bool

  def twitter_nickname_changed?: () -> bool

  def twitter_nickname_change: () -> [ ::String?, ::String? ]

  def twitter_nickname_will_change!: () -> void

  def twitter_nickname_was: () -> ::String?

  def twitter_nickname_previous_change: () -> Array[::String?]?

  def twitter_nickname_previously_was: () -> ::String?

  def restore_twitter_nickname!: () -> void

  def clear_twitter_nickname_change: () -> void

  def saved_change_to_twitter_nickname?: () -> bool

  def saved_change_to_twitter_nickname: () -> Array[::String?]?

  def twitter_nickname_before_last_save: () -> ::String?

  def will_save_change_to_twitter_nickname?: () -> bool

  def twitter_nickname_change_to_be_saved: () -> Array[::String?]?

  def twitter_nickname_in_database: () -> ::String?

  attr_accessor confirmation_token: ::String?

  def confirmation_token_before_type_cast: () -> ::String?

  def confirmation_token_for_database: () -> ::String?

  def confirmation_token_came_from_user?: () -> bool

  def confirmation_token?: () -> bool

  def confirmation_token_previously_changed?: () -> bool

  def confirmation_token_changed?: () -> bool

  def confirmation_token_change: () -> [ ::String?, ::String? ]

  def confirmation_token_will_change!: () -> void

  def confirmation_token_was: () -> ::String?

  def confirmation_token_previous_change: () -> Array[::String?]?

  def confirmation_token_previously_was: () -> ::String?

  def restore_confirmation_token!: () -> void

  def clear_confirmation_token_change: () -> void

  def saved_change_to_confirmation_token?: () -> bool

  def saved_change_to_confirmation_token: () -> Array[::String?]?

  def confirmation_token_before_last_save: () -> ::String?

  def will_save_change_to_confirmation_token?: () -> bool

  def confirmation_token_change_to_be_saved: () -> Array[::String?]?

  def confirmation_token_in_database: () -> ::String?

  attr_accessor confirmed_at: ::ActiveSupport::TimeWithZone?

  def confirmed_at_before_type_cast: () -> ::ActiveSupport::TimeWithZone?

  def confirmed_at_for_database: () -> ::ActiveSupport::TimeWithZone?

  def confirmed_at_came_from_user?: () -> bool

  def confirmed_at?: () -> bool

  def confirmed_at_previously_changed?: () -> bool

  def confirmed_at_changed?: () -> bool

  def confirmed_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

  def confirmed_at_will_change!: () -> void

  def confirmed_at_was: () -> ::ActiveSupport::TimeWithZone?

  def confirmed_at_previous_change: () -> Array[::ActiveSupport::TimeWithZone?]?

  def confirmed_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

  def restore_confirmed_at!: () -> void

  def clear_confirmed_at_change: () -> void

  def saved_change_to_confirmed_at?: () -> bool

  def saved_change_to_confirmed_at: () -> Array[::ActiveSupport::TimeWithZone?]?

  def confirmed_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

  def will_save_change_to_confirmed_at?: () -> bool

  def confirmed_at_change_to_be_saved: () -> Array[::ActiveSupport::TimeWithZone?]?

  def confirmed_at_in_database: () -> ::ActiveSupport::TimeWithZone?

  attr_accessor name: ::String?

  def name_before_type_cast: () -> ::String?

  def name_for_database: () -> ::String?

  def name_came_from_user?: () -> bool

  def name?: () -> bool

  def name_previously_changed?: () -> bool

  def name_changed?: () -> bool

  def name_change: () -> [ ::String?, ::String? ]

  def name_will_change!: () -> void

  def name_was: () -> ::String?

  def name_previous_change: () -> Array[::String?]?

  def name_previously_was: () -> ::String?

  def restore_name!: () -> void

  def clear_name_change: () -> void

  def saved_change_to_name?: () -> bool

  def saved_change_to_name: () -> Array[::String?]?

  def name_before_last_save: () -> ::String?

  def will_save_change_to_name?: () -> bool

  def name_change_to_be_saved: () -> Array[::String?]?

  def name_in_database: () -> ::String?

  attr_accessor blog: ::String?

  def blog_before_type_cast: () -> ::String?

  def blog_for_database: () -> ::String?

  def blog_came_from_user?: () -> bool

  def blog?: () -> bool

  def blog_previously_changed?: () -> bool

  def blog_changed?: () -> bool

  def blog_change: () -> [ ::String?, ::String? ]

  def blog_will_change!: () -> void

  def blog_was: () -> ::String?

  def blog_previous_change: () -> Array[::String?]?

  def blog_previously_was: () -> ::String?

  def restore_blog!: () -> void

  def clear_blog_change: () -> void

  def saved_change_to_blog?: () -> bool

  def saved_change_to_blog: () -> Array[::String?]?

  def blog_before_last_save: () -> ::String?

  def will_save_change_to_blog?: () -> bool

  def blog_change_to_be_saved: () -> Array[::String?]?

  def blog_in_database: () -> ::String?

  attr_accessor location: ::String?

  def location_before_type_cast: () -> ::String?

  def location_for_database: () -> ::String?

  def location_came_from_user?: () -> bool

  def location?: () -> bool

  def location_previously_changed?: () -> bool

  def location_changed?: () -> bool

  def location_change: () -> [ ::String?, ::String? ]

  def location_will_change!: () -> void

  def location_was: () -> ::String?

  def location_previous_change: () -> Array[::String?]?

  def location_previously_was: () -> ::String?

  def restore_location!: () -> void

  def clear_location_change: () -> void

  def saved_change_to_location?: () -> bool

  def saved_change_to_location: () -> Array[::String?]?

  def location_before_last_save: () -> ::String?

  def will_save_change_to_location?: () -> bool

  def location_change_to_be_saved: () -> Array[::String?]?

  def location_in_database: () -> ::String?

  attr_accessor thank_you_email_sent: bool?

  def thank_you_email_sent_before_type_cast: () -> bool?

  def thank_you_email_sent_for_database: () -> bool?

  def thank_you_email_sent_came_from_user?: () -> bool

  def thank_you_email_sent?: () -> bool

  def thank_you_email_sent_previously_changed?: () -> bool

  def thank_you_email_sent_changed?: () -> bool

  def thank_you_email_sent_change: () -> [ bool?, bool? ]

  def thank_you_email_sent_will_change!: () -> void

  def thank_you_email_sent_was: () -> bool?

  def thank_you_email_sent_previous_change: () -> Array[bool?]?

  def thank_you_email_sent_previously_was: () -> bool?

  def restore_thank_you_email_sent!: () -> void

  def clear_thank_you_email_sent_change: () -> void

  def saved_change_to_thank_you_email_sent?: () -> bool

  def saved_change_to_thank_you_email_sent: () -> Array[bool?]?

  def thank_you_email_sent_before_last_save: () -> bool?

  def will_save_change_to_thank_you_email_sent?: () -> bool

  def thank_you_email_sent_change_to_be_saved: () -> Array[bool?]?

  def thank_you_email_sent_in_database: () -> bool?

  attr_accessor lat: ::BigDecimal?

  def lat_before_type_cast: () -> ::BigDecimal?

  def lat_for_database: () -> ::BigDecimal?

  def lat_came_from_user?: () -> bool

  def lat?: () -> bool

  def lat_previously_changed?: () -> bool

  def lat_changed?: () -> bool

  def lat_change: () -> [ ::BigDecimal?, ::BigDecimal? ]

  def lat_will_change!: () -> void

  def lat_was: () -> ::BigDecimal?

  def lat_previous_change: () -> Array[::BigDecimal?]?

  def lat_previously_was: () -> ::BigDecimal?

  def restore_lat!: () -> void

  def clear_lat_change: () -> void

  def saved_change_to_lat?: () -> bool

  def saved_change_to_lat: () -> Array[::BigDecimal?]?

  def lat_before_last_save: () -> ::BigDecimal?

  def will_save_change_to_lat?: () -> bool

  def lat_change_to_be_saved: () -> Array[::BigDecimal?]?

  def lat_in_database: () -> ::BigDecimal?

  attr_accessor lng: ::BigDecimal?

  def lng_before_type_cast: () -> ::BigDecimal?

  def lng_for_database: () -> ::BigDecimal?

  def lng_came_from_user?: () -> bool

  def lng?: () -> bool

  def lng_previously_changed?: () -> bool

  def lng_changed?: () -> bool

  def lng_change: () -> [ ::BigDecimal?, ::BigDecimal? ]

  def lng_will_change!: () -> void

  def lng_was: () -> ::BigDecimal?

  def lng_previous_change: () -> Array[::BigDecimal?]?

  def lng_previously_was: () -> ::BigDecimal?

  def restore_lng!: () -> void

  def clear_lng_change: () -> void

  def saved_change_to_lng?: () -> bool

  def saved_change_to_lng: () -> Array[::BigDecimal?]?

  def lng_before_last_save: () -> ::BigDecimal?

  def will_save_change_to_lng?: () -> bool

  def lng_change_to_be_saved: () -> Array[::BigDecimal?]?

  def lng_in_database: () -> ::BigDecimal?

  attr_accessor ignored_organisations: ::String?

  def ignored_organisations_before_type_cast: () -> ::String?

  def ignored_organisations_for_database: () -> ::String?

  def ignored_organisations_came_from_user?: () -> bool

  def ignored_organisations?: () -> bool

  def ignored_organisations_previously_changed?: () -> bool

  def ignored_organisations_changed?: () -> bool

  def ignored_organisations_change: () -> [ ::String?, ::String? ]

  def ignored_organisations_will_change!: () -> void

  def ignored_organisations_was: () -> ::String?

  def ignored_organisations_previous_change: () -> Array[::String?]?

  def ignored_organisations_previously_was: () -> ::String?

  def restore_ignored_organisations!: () -> void

  def clear_ignored_organisations_change: () -> void

  def saved_change_to_ignored_organisations?: () -> bool

  def saved_change_to_ignored_organisations: () -> Array[::String?]?

  def ignored_organisations_before_last_save: () -> ::String?

  def will_save_change_to_ignored_organisations?: () -> bool

  def ignored_organisations_change_to_be_saved: () -> Array[::String?]?

  def ignored_organisations_in_database: () -> ::String?

  attr_accessor unsubscribe_token: ::String

  def unsubscribe_token_before_type_cast: () -> ::String

  def unsubscribe_token_for_database: () -> ::String

  def unsubscribe_token_came_from_user?: () -> bool

  def unsubscribe_token?: () -> bool

  def unsubscribe_token_previously_changed?: () -> bool

  def unsubscribe_token_changed?: () -> bool

  def unsubscribe_token_change: () -> [ ::String?, ::String? ]

  def unsubscribe_token_will_change!: () -> void

  def unsubscribe_token_was: () -> ::String?

  def unsubscribe_token_previous_change: () -> Array[::String?]?

  def unsubscribe_token_previously_was: () -> ::String?

  def restore_unsubscribe_token!: () -> void

  def clear_unsubscribe_token_change: () -> void

  def saved_change_to_unsubscribe_token?: () -> bool

  def saved_change_to_unsubscribe_token: () -> Array[::String?]?

  def unsubscribe_token_before_last_save: () -> ::String?

  def will_save_change_to_unsubscribe_token?: () -> bool

  def unsubscribe_token_change_to_be_saved: () -> Array[::String?]?

  def unsubscribe_token_in_database: () -> ::String?

  attr_accessor time_zone: ::String?

  def time_zone_before_type_cast: () -> ::String?

  def time_zone_for_database: () -> ::String?

  def time_zone_came_from_user?: () -> bool

  def time_zone?: () -> bool

  def time_zone_previously_changed?: () -> bool

  def time_zone_changed?: () -> bool

  def time_zone_change: () -> [ ::String?, ::String? ]

  def time_zone_will_change!: () -> void

  def time_zone_was: () -> ::String?

  def time_zone_previous_change: () -> Array[::String?]?

  def time_zone_previously_was: () -> ::String?

  def restore_time_zone!: () -> void

  def clear_time_zone_change: () -> void

  def saved_change_to_time_zone?: () -> bool

  def saved_change_to_time_zone: () -> Array[::String?]?

  def time_zone_before_last_save: () -> ::String?

  def will_save_change_to_time_zone?: () -> bool

  def time_zone_change_to_be_saved: () -> Array[::String?]?

  def time_zone_in_database: () -> ::String?

  attr_accessor invalid_token: bool?

  def invalid_token_before_type_cast: () -> bool?

  def invalid_token_for_database: () -> bool?

  def invalid_token_came_from_user?: () -> bool

  def invalid_token?: () -> bool

  def invalid_token_previously_changed?: () -> bool

  def invalid_token_changed?: () -> bool

  def invalid_token_change: () -> [ bool?, bool? ]

  def invalid_token_will_change!: () -> void

  def invalid_token_was: () -> bool?

  def invalid_token_previous_change: () -> Array[bool?]?

  def invalid_token_previously_was: () -> bool?

  def restore_invalid_token!: () -> void

  def clear_invalid_token_change: () -> void

  def saved_change_to_invalid_token?: () -> bool

  def saved_change_to_invalid_token: () -> Array[bool?]?

  def invalid_token_before_last_save: () -> bool?

  def will_save_change_to_invalid_token?: () -> bool

  def invalid_token_change_to_be_saved: () -> Array[bool?]?

  def invalid_token_in_database: () -> bool?
end

module User::GeneratedRelationMethods
  def by_language: (*untyped, **untyped) -> untyped

  def with_any_contributions: (*untyped, **untyped) -> untyped

  def random: (*untyped, **untyped) -> untyped

  def by_nickname: (*untyped, **untyped) -> untyped

  def active: (*untyped, **untyped) -> untyped

  def load_user: (*untyped, **untyped) -> untyped

  def find_by_nickname!: (*untyped, **untyped) -> untyped

  def contributors: (*untyped, **untyped) -> untyped

  def find_by_unsubscribe_token: (*untyped, **untyped) -> untyped

  def find_by_nickname: (*untyped, **untyped) -> untyped

  def _reflections: (*untyped, **untyped) -> untyped

  def __callbacks: (*untyped, **untyped) -> untyped

  def defined_enums: (*untyped, **untyped) -> untyped

  def organization_members: (*untyped, **untyped) -> untyped

  def counter_cached_association_names: (*untyped, **untyped) -> untyped

  def find_by_login: (*untyped, **untyped) -> untyped

  def _validators: (*untyped, **untyped) -> untyped

  def create_from_auth_hash: (*untyped, **untyped) -> untyped

  def where_nickname_in: (*untyped, **untyped) -> untyped

  def admins: (*untyped, **untyped) -> untyped

  def mergers: (*untyped, **untyped) -> untyped

  def nested_attributes_options: (*untyped, **untyped) -> untyped

  def find_by_auth_hash: (*untyped, **untyped) -> untyped

  include Kaminari::ConfigurationMethods::ClassMethods

  include Draper::Decoratable::ClassMethods

  include Kaminari::ActiveRecordExtension::ClassMethods

  include ActiveRecord::Normalization::ClassMethods

  include ActiveRecord::Suppressor::ClassMethods

  include ActiveRecord::SignedId::ClassMethods

  include ActiveRecord::TokenFor::ClassMethods

  include ActiveRecord::SecureToken::ClassMethods

  include ActiveRecord::Store::ClassMethods

  include ActiveRecord::Reflection::ClassMethods

  include ActiveRecord::NoTouching::ClassMethods

  include ActiveRecord::Transactions::ClassMethods

  include ActiveRecord::NestedAttributes::ClassMethods

  include ActiveRecord::AutosaveAssociation::ClassMethods

  include ActiveRecord::SecurePassword::ClassMethods

  include ActiveModel::SecurePassword::ClassMethods

  include ActiveRecord::Associations::ClassMethods

  include ActiveRecord::Timestamp::ClassMethods

  include ActiveModel::Validations::Callbacks::ClassMethods

  include ActiveRecord::Callbacks::ClassMethods

  include ActiveRecord::AttributeMethods::Serialization::ClassMethods

  include ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  include ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  include ActiveRecord::AttributeMethods::Write::ClassMethods

  include ActiveRecord::AttributeMethods::Read::ClassMethods

  include ActiveRecord::AttributeMethods::ClassMethods

  include ActiveModel::AttributeMethods::ClassMethods

  include ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  include ActiveRecord::Locking::Optimistic::ClassMethods

  include ActiveRecord::Attributes::ClassMethods

  include ActiveModel::AttributeRegistration::ClassMethods

  include ActiveRecord::CounterCache::ClassMethods

  include ActiveRecord::Validations::ClassMethods

  include ActiveRecord::Integration::ClassMethods

  include ActiveRecord::Sanitization::ClassMethods

  include ActiveRecord::Scoping::Named::ClassMethods

  include ActiveRecord::Scoping::Default::ClassMethods

  include ActiveRecord::Scoping::ClassMethods

  include ActiveRecord::Inheritance::ClassMethods

  include ActiveRecord::ModelSchema::ClassMethods

  include ActiveRecord::ReadonlyAttributes::ClassMethods

  include ActiveRecord::Persistence::ClassMethods

  include ActiveRecord::Core::ClassMethods

  include ActiveRecord::Aggregations::ClassMethods

  include ActiveRecord::Delegation::DelegateCache

  include ActiveRecord::Enum

  include ActiveRecord::DelegatedType

  include ActiveRecord::DynamicMatchers

  include ActiveRecord::Translation

  include ActiveRecord::Querying

  include ActiveRecord::QueryCache::ClassMethods

  include ActiveRecord::ConnectionHandling

  include ActiveSupport::Benchmarkable

  include ActiveModel::Conversion::ClassMethods

  include ActiveModel::Validations::HelperMethods

  include ActiveModel::Translation

  include ActiveSupport::DescendantsTracker

  include ActiveSupport::Callbacks::ClassMethods

  include ActiveModel::Callbacks

  include ActiveModel::Naming

  include ActiveModel::Validations::ClassMethods

  include ActiveSupport::DescendantsTracker::ReloadedClassesFiltering

  include Orthoses::LazyTracePoint::MethodAddedHook

  include Orthoses::Mixin::Hook

  include Zeitwerk::ConstAdded

  include Module::Concerning
end

class User::HABTM_Organisations < ::ActiveRecord::Base
  extend _ActiveRecord_Relation_ClassMethods[User::HABTM_Organisations, User::HABTM_Organisations::ActiveRecord_Relation, ::Integer]
  extend User::HABTM_Organisations::ActiveRecord_Persistence_ClassMethods
  include User::HABTM_Organisations::GeneratedAssociationMethods
  include User::HABTM_Organisations::GeneratedAttributeMethods
  include Kaminari::ActiveRecordModelExtension
  include Kaminari::ConfigurationMethods
  extend Kaminari::ConfigurationMethods::ClassMethods
end

class User::HABTM_Organisations::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include User::HABTM_Organisations::GeneratedRelationMethods
end

class User::HABTM_Organisations::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include _ActiveRecord_Relation[User::HABTM_Organisations, ::Integer]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include User::HABTM_Organisations::GeneratedRelationMethods
end

class User::HABTM_Organisations::ActiveRecord_DisableJoinsAssociationRelation < ::ActiveRecord::DisableJoinsAssociationRelation
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
  include User::HABTM_Organisations::GeneratedRelationMethods
end

module User::HABTM_Organisations::ActiveRecord_Persistence_ClassMethods
  def create: (?id: ::Integer, ?user_id: ::Integer?, ?organisation_id: ::Integer?, **untyped) ?{ (User::HABTM_Organisations) -> void } -> User::HABTM_Organisations
            | (::Array[Hash[Symbol, untyped]]) ?{ (User::HABTM_Organisations) -> void } -> ::Array[User::HABTM_Organisations]

  def create!: (?id: ::Integer, ?user_id: ::Integer?, ?organisation_id: ::Integer?, **untyped) ?{ (User::HABTM_Organisations) -> void } -> User::HABTM_Organisations
             | (::Array[Hash[Symbol, untyped]]) ?{ (User::HABTM_Organisations) -> void } -> ::Array[User::HABTM_Organisations]

  def build: (?id: ::Integer, ?user_id: ::Integer?, ?organisation_id: ::Integer?, **untyped) ?{ (User::HABTM_Organisations) -> void } -> User::HABTM_Organisations
           | (::Array[Hash[Symbol, untyped]]) ?{ (User::HABTM_Organisations) -> void } -> ::Array[User::HABTM_Organisations]
end

class User::HABTM_Organisations::ActiveRecord_Relation < ::ActiveRecord::Relation
  include User::HABTM_Organisations::GeneratedRelationMethods
  include _ActiveRecord_Relation[User::HABTM_Organisations, ::Integer]
  include Enumerable[User::HABTM_Organisations]
  include ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Base::GeneratedRelationMethods
end

module User::HABTM_Organisations::GeneratedAssociationMethods
  def left_side: () -> User?

  def left_side=: (User?) -> User?

  def reload_left_side: () -> User?

  def build_left_side: (?untyped attributes) ?{ (User) -> void } -> User

  def create_left_side: (?untyped attributes) ?{ (User) -> void } -> User

  def create_left_side!: (?untyped attributes) ?{ (User) -> void } -> User

  def organisation: () -> Organisation?

  def organisation=: (Organisation?) -> Organisation?

  def reload_organisation: () -> Organisation?

  def build_organisation: (?untyped attributes) ?{ (Organisation) -> void } -> Organisation

  def create_organisation: (?untyped attributes) ?{ (Organisation) -> void } -> Organisation

  def create_organisation!: (?untyped attributes) ?{ (Organisation) -> void } -> Organisation
end

module User::HABTM_Organisations::GeneratedAttributeMethods
  attr_accessor id: ::Integer

  def id_before_type_cast: () -> ::Integer

  def id_for_database: () -> ::Integer

  def id_came_from_user?: () -> bool

  def id?: () -> bool

  def id_previously_changed?: () -> bool

  def id_changed?: () -> bool

  def id_change: () -> [ ::Integer?, ::Integer? ]

  def id_will_change!: () -> void

  def id_was: () -> ::Integer?

  def id_previous_change: () -> Array[::Integer?]?

  def id_previously_was: () -> ::Integer?

  def restore_id!: () -> void

  def clear_id_change: () -> void

  def saved_change_to_id?: () -> bool

  def saved_change_to_id: () -> Array[::Integer?]?

  def id_before_last_save: () -> ::Integer?

  def will_save_change_to_id?: () -> bool

  def id_change_to_be_saved: () -> Array[::Integer?]?

  def id_in_database: () -> ::Integer?

  attr_accessor user_id: ::Integer?

  def user_id_before_type_cast: () -> ::Integer?

  def user_id_for_database: () -> ::Integer?

  def user_id_came_from_user?: () -> bool

  def user_id?: () -> bool

  def user_id_previously_changed?: () -> bool

  def user_id_changed?: () -> bool

  def user_id_change: () -> [ ::Integer?, ::Integer? ]

  def user_id_will_change!: () -> void

  def user_id_was: () -> ::Integer?

  def user_id_previous_change: () -> Array[::Integer?]?

  def user_id_previously_was: () -> ::Integer?

  def restore_user_id!: () -> void

  def clear_user_id_change: () -> void

  def saved_change_to_user_id?: () -> bool

  def saved_change_to_user_id: () -> Array[::Integer?]?

  def user_id_before_last_save: () -> ::Integer?

  def will_save_change_to_user_id?: () -> bool

  def user_id_change_to_be_saved: () -> Array[::Integer?]?

  def user_id_in_database: () -> ::Integer?

  attr_accessor organisation_id: ::Integer?

  def organisation_id_before_type_cast: () -> ::Integer?

  def organisation_id_for_database: () -> ::Integer?

  def organisation_id_came_from_user?: () -> bool

  def organisation_id?: () -> bool

  def organisation_id_previously_changed?: () -> bool

  def organisation_id_changed?: () -> bool

  def organisation_id_change: () -> [ ::Integer?, ::Integer? ]

  def organisation_id_will_change!: () -> void

  def organisation_id_was: () -> ::Integer?

  def organisation_id_previous_change: () -> Array[::Integer?]?

  def organisation_id_previously_was: () -> ::Integer?

  def restore_organisation_id!: () -> void

  def clear_organisation_id_change: () -> void

  def saved_change_to_organisation_id?: () -> bool

  def saved_change_to_organisation_id: () -> Array[::Integer?]?

  def organisation_id_before_last_save: () -> ::Integer?

  def will_save_change_to_organisation_id?: () -> bool

  def organisation_id_change_to_be_saved: () -> Array[::Integer?]?

  def organisation_id_in_database: () -> ::Integer?
end

module User::HABTM_Organisations::GeneratedRelationMethods
  def __callbacks: (*untyped, **untyped) -> untyped

  def name: (*untyped, **untyped) -> untyped

  def name=: (*untyped, **untyped) -> untyped

  def defined_enums: (*untyped, **untyped) -> untyped

  def left_model=: (*untyped, **untyped) -> untyped

  def add_left_association: (*untyped, **untyped) -> untyped

  def table_name_resolver=: (*untyped, **untyped) -> untyped

  def page: (*untyped, **untyped) -> untyped

  def left_model: (*untyped, **untyped) -> untyped

  def table_name_resolver: (*untyped, **untyped) -> untyped

  def left_reflection: (*untyped, **untyped) -> untyped

  def _validators: (*untyped, **untyped) -> untyped

  def left_reflection=: (*untyped, **untyped) -> untyped

  def right_reflection=: (*untyped, **untyped) -> untyped

  def right_reflection: (*untyped, **untyped) -> untyped

  def counter_cached_association_names: (*untyped, **untyped) -> untyped

  def table_name: (*untyped, **untyped) -> untyped

  def add_right_association: (*untyped, **untyped) -> untyped

  def compute_type: (*untyped, **untyped) -> untyped

  def connection_pool: (*untyped, **untyped) -> untyped

  def _reflections: (*untyped, **untyped) -> untyped

  include Kaminari::ConfigurationMethods::ClassMethods

  include Draper::Decoratable::ClassMethods

  include Kaminari::ActiveRecordExtension::ClassMethods

  include ActiveRecord::Normalization::ClassMethods

  include ActiveRecord::Suppressor::ClassMethods

  include ActiveRecord::SignedId::ClassMethods

  include ActiveRecord::TokenFor::ClassMethods

  include ActiveRecord::SecureToken::ClassMethods

  include ActiveRecord::Store::ClassMethods

  include ActiveRecord::Reflection::ClassMethods

  include ActiveRecord::NoTouching::ClassMethods

  include ActiveRecord::Transactions::ClassMethods

  include ActiveRecord::NestedAttributes::ClassMethods

  include ActiveRecord::AutosaveAssociation::ClassMethods

  include ActiveRecord::SecurePassword::ClassMethods

  include ActiveModel::SecurePassword::ClassMethods

  include ActiveRecord::Associations::ClassMethods

  include ActiveRecord::Timestamp::ClassMethods

  include ActiveModel::Validations::Callbacks::ClassMethods

  include ActiveRecord::Callbacks::ClassMethods

  include ActiveRecord::AttributeMethods::Serialization::ClassMethods

  include ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  include ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  include ActiveRecord::AttributeMethods::Write::ClassMethods

  include ActiveRecord::AttributeMethods::Read::ClassMethods

  include ActiveRecord::AttributeMethods::ClassMethods

  include ActiveModel::AttributeMethods::ClassMethods

  include ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  include ActiveRecord::Locking::Optimistic::ClassMethods

  include ActiveRecord::Attributes::ClassMethods

  include ActiveModel::AttributeRegistration::ClassMethods

  include ActiveRecord::CounterCache::ClassMethods

  include ActiveRecord::Validations::ClassMethods

  include ActiveRecord::Integration::ClassMethods

  include ActiveRecord::Sanitization::ClassMethods

  include ActiveRecord::Scoping::Named::ClassMethods

  include ActiveRecord::Scoping::Default::ClassMethods

  include ActiveRecord::Scoping::ClassMethods

  include ActiveRecord::Inheritance::ClassMethods

  include ActiveRecord::ModelSchema::ClassMethods

  include ActiveRecord::ReadonlyAttributes::ClassMethods

  include ActiveRecord::Persistence::ClassMethods

  include ActiveRecord::Core::ClassMethods

  include ActiveRecord::Aggregations::ClassMethods

  include ActiveRecord::Delegation::DelegateCache

  include ActiveRecord::Enum

  include ActiveRecord::DelegatedType

  include ActiveRecord::DynamicMatchers

  include ActiveRecord::Translation

  include ActiveRecord::Querying

  include ActiveRecord::QueryCache::ClassMethods

  include ActiveRecord::ConnectionHandling

  include ActiveSupport::Benchmarkable

  include ActiveModel::Conversion::ClassMethods

  include ActiveModel::Validations::HelperMethods

  include ActiveModel::Translation

  include ActiveSupport::DescendantsTracker

  include ActiveSupport::Callbacks::ClassMethods

  include ActiveModel::Callbacks

  include ActiveModel::Naming

  include ActiveModel::Validations::ClassMethods

  include ActiveSupport::DescendantsTracker::ReloadedClassesFiltering

  include Orthoses::LazyTracePoint::MethodAddedHook

  include Orthoses::Mixin::Hook

  include Zeitwerk::ConstAdded

  include Module::Concerning
end
